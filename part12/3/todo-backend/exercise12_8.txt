Script started on Fri Feb 14 21:52:03 2025
[1m[7m%[27m[1m[0m                                                                                                                                                                                                                   ]2;jakubkaminski@Jakubs-MacBook-Air:~/Robocze/fullstackopen/part12/3/todo-backend]1;../todo-backend]7;file://Jakubs-MacBook-Air.local/Users/jakubkaminski/Robocze/fullstackopen/part12/3/todo-backend\[0m[27m[24m[J[01;32mâžœ  [36mtodo-backend[00m [K[?1h=[?2004h[0m[27m[24m[J[01;32mâžœ  [36mtodo-backend[00m [01;34mgit:([31mmain[34m) [33mâœ—[00m [Kscript exercise12_8.txt[23Dclear                  [18Ddocker exec -it 7f6b7cd914fe mongosh -u root -p example[?1l>[?2004l
]2;docker exec -it 7f6b7cd914fe mongosh -u root -p example]1;docker]0;mongosh mongodb://<credentials>@127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000Current Mongosh Log ID:	67afacfeb961897d54a00aa0
Connecting to:		[1m[32mmongodb://<credentials>@127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.8[0m
Using MongoDB:		8.0.4
[1m[33mUsing Mongosh[0m:		2.3.8

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

[1G[0J [1G[1m[33m------[0m
   [1m[33mThe server generated these startup warnings when booting[0m
   2025-02-14T20:43:30.613+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
   2025-02-14T20:43:31.107+00:00: For customers running the current memory allocator, we suggest changing the contents of the following sysfsFile
   2025-02-14T20:43:31.107+00:00: We suggest setting the contents of sysfsFile to 0.
   2025-02-14T20:43:31.107+00:00: Your system has glibc support for rseq built in, which is not yet supported by tcmalloc-google and has critical performance implications. Please set the environment variable GLIBC_TUNABLES=glibc.pthread.rseq=0
   2025-02-14T20:43:31.107+00:00: vm.max_map_count is too low
   2025-02-14T20:43:31.107+00:00: We suggest setting swappiness to 0 or 1, as swapping can cause performance problems.
[1m[33m------[0m

[1G[0Jtest> [7Gs[1G[0Jtest> [7Gu[1G[0Jtest> [7Gshow dbs
[1madmin[0m         100.00 KiB
[1mconfig[0m         60.00 KiB
[1mlocal[0m          72.00 KiB
[1mthe_database[0m   40.00 KiB
[1G[0Jtest> [7Guse the_database
switched to db the_database
[1G[0Jthe_database> [15Gshow collections
[1mtodos[0m
[1G[0Jthe_database> [15Gdb.todos.find){[1G[0Jthe_database> db.todos.find)[29G[1G[0Jthe_database> db.todos.find[28G({})
[
  {
    _id: ObjectId([32m'67afaaf1d7802a7946a00aa1'[39m),
    text: [32m'Write code'[39m,
    done: [33mtrue[39m
  },
  {
    _id: ObjectId([32m'67afaaf1d7802a7946a00aa2'[39m),
    text: [32m'Learn about containers'[39m,
    done: [33mfalse[39m
  }
]
[1G[0Jthe_database> [15Gdb.todos.insertOne()[1D[1G[0Jthe_database> db.todos.insertOne[44m([49m)[34G[1G[0Jthe_database> db.todos.insertOne[44m([49m{)[35G[1G[0Jthe_database> db.todos.insertOne[44m([49m{})[36G[1D[1G[0Jthe_database> db.todos.insertOne([44m{[49m})[35G[1G[0Jthe_database> db.todos.insertOne([44m{[49m })[36G[1D[1G[0Jthe_database> db.todos.insertOne({ })[35G[1G[0Jthe_database> db.todos.insertOne({  })[36G[1G[0Jthe_database> db.todos.insertOne({ t })[37G[1G[0Jthe_database> db.todos.insertOne({ te })[38G[1G[0Jthe_database> db.todos.insertOne({ tex })[39G[1G[0Jthe_database> db.todos.insertOne({ text })[40G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: })[41G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m:  })[42G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m" })[39m[43G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m""[39m })[44G[1D[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49m"[39m })[43G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mI"[39m })[44G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mIn"[39m })[45G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mIns"[39m })[46G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInse"[39m })[47G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInser"[39m })[48G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert"[39m })[49G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert "[39m })[50G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert f"[39m })[51G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert fr"[39m })[52G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert fro"[39m })[53G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from"[39m })[54G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from "[39m })[55G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from d"[39m })[56G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from do"[39m })[57G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from doc"[39m })[58G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from dock"[39m })[59G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docke"[39m })[60G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker"[39m })[61G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker "[39m })[62G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker m"[39m })[63G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mo"[39m })[64G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mon"[39m })[65G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mong"[39m })[66G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongo"[39m })[67G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongos"[39m })[68G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh"[39m })[69G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh "[39m })[70G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh w"[39m })[71G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh wo"[39m })[72G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh wor"[39m })[73G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh work"[39m })[74G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh works"[39m })[75G[5D[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh works"[39m })[70G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh -works"[39m })[71G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m })[72G[5C[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [44m[32m"[49mInsert from docker mongosh - works"[39m })[77G[1C[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m })[78G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, })[79G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m,  })[80G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, d })[81G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [36mdo[39m })[82G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, don })[83G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, done })[84G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: })[85G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m:  })[86G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: t })[87G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: tr })[88G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: tru })[89G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: [33mtrue[39m })[90G[1C[1G[0Jthe_database> db.todos.insertOne([44m{[49m [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: [33mtrue[39m })[91G[1C[1G[0Jthe_database> db.todos.insertOne[44m([49m{ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: [33mtrue[39m })[92G[1C[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: [33mtrue[39m })[93G
{
  acknowledged: [33mtrue[39m,
  insertedId: ObjectId([32m'67afad8db961897d54a00aa1'[39m)
}
[1G[0Jthe_database> [15G[1G[0Jthe_database> db.todos.insertOne({ [33mtext[39m: [32m"Insert from docker mongosh - works"[39m, [33mdone[39m: [33mtrue[39m })[93G[1G[0Jthe_database> db.todos.find({})[32G
[
  {
    _id: ObjectId([32m'67afaaf1d7802a7946a00aa1'[39m),
    text: [32m'Write code'[39m,
    done: [33mtrue[39m
  },
  {
    _id: ObjectId([32m'67afaaf1d7802a7946a00aa2'[39m),
    text: [32m'Learn about containers'[39m,
    done: [33mfalse[39m
  },
  {
    _id: ObjectId([32m'67afad8db961897d54a00aa1'[39m),
    text: [32m'Insert from docker mongosh - works'[39m,
    done: [33mtrue[39m
  }
]
[1G[0Jthe_database> [15G
(To exit, press Ctrl+C again or Ctrl+D or type .exit)
[1G[0Jthe_database> [15G
[1m
What's next:[0m
    Try Docker Debug for seamless, persistent debugging tools in any container or image â†’ [36mdocker debug 7f6b7cd914fe[0m
    Learn more at https://docs.docker.com/go/debug-cli/
[1m[7m%[27m[1m[0m                                                                                                                                                                                                                   ]2;jakubkaminski@Jakubs-MacBook-Air:~/Robocze/fullstackopen/part12/3/todo-backend]1;../todo-backend]7;file://Jakubs-MacBook-Air.local/Users/jakubkaminski/Robocze/fullstackopen/part12/3/todo-backend\[0m[27m[24m[J[01;32mâžœ  [36mtodo-backend[00m [01;34mgit:([31mmain[34m) [33mâœ—[00m [K[?1h=[?2004heexit[?1l>[?2004l
]2;exit]1;exit
Script done on Fri Feb 14 21:54:50 2025
